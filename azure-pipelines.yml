# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

variables:
- group: kconfig
- name: my-passed-variable
  value: $[variables.configp3b64] # uses runtime expression

pool:
  vmImage: 'ubuntu-latest'

steps:
- script: echo Hello, world!
  displayName: 'Run a one-line script'

- script: |
    ./perl_line.sh {'some':'data'}
    ./repl.sh
    cat function_gen.yaml
  displayName: 'test and replace'

- script: |
    echo $KCONFIGP1B64 > kconfig.b64
    echo $KCONFIGP2B64 >> kconfig.b64
    echo $KCONFIGP3B64 >> kconfig.b64
    echo $KCONFIGP4B64 >> kconfig.b64
    cat kconfig.b64 | base64 --decode > $(System.DefaultWorkingDirectory)/kubeconfig
  displayName: 'create kubeconfig'

- task: KubectlInstaller@0
  inputs:
    kubectlVersion: 'latest'

- task: Kubernetes@1
  inputs:
    connectionType: 'None'
    namespace: 'default'
    command: 'get'
    arguments: 'pods --kubeconfig=$(System.DefaultWorkingDirectory)/kubeconfig'
    secretType: 'dockerRegistry'
    containerRegistryType: 'Azure Container Registry'
    outputFormat: 'none'

- script: kubectl get pods --kubeconfig=$(System.DefaultWorkingDirectory)/kubeconfig
  displayName: 'via cli'

- script: kubectl apply -f function_gen.yaml --kubeconfig=$(System.DefaultWorkingDirectory)/kubeconfig
  displayName: 'update'
  condition: always()
  continueOnError: true

- script: |
    export OS=$(uname -s| tr '[:upper:]' '[:lower:]')
    export RELEASE=$(curl -s https://api.github.com/repos/kubeless/kubeless/releases/latest | grep tag_name | cut -d '"' -f 4)
    curl -OL https://github.com/kubeless/kubeless/releases/download/$RELEASE/kubeless_$OS-amd64.zip
    unzip kubeless_$OS-amd64.zip
    export KUBECONFIG=$(System.DefaultWorkingDirectory)/kubeconfig
    sleep 10
    bundles/kubeless_$OS-amd64/kubeless get-server-config
    bundles/kubeless_$OS-amd64/kubeless function call hello3 --data '{"Another":"Echo"}'
  displayName: 'via kubeless'
  condition: always()
  continueOnError: true

